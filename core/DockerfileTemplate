#Dockerfile Template for the specific projects that uses TestMaker. You must change the sequent values:
# CHROME_VERSION: a version that supports the ChromeDriver specified in the project
# FIREFOX_VERSION: a version that supports the GeckoDriver specified in the project
# the "test80" project with the name of the specific name of the project that uses TestMaker

#When executing docker run for an image with Chrome or Firefox please either mount -v /dev/shm:/dev/shm or use the flag --shm-size=2g to use the host's shared memory.
#example: docker container run --detach -p 80:80 -p 443:443 --shm-size=2g -v $pwd\outputdocker:/test80-1.0/output-library robotest:latest
FROM ubuntu:19.04

RUN apt-get update -y \
	&& apt-get install -y wget \
	&& apt-get install -y gnupg2 \
	&& apt-get -qqy dist-upgrade \
	&& apt-get -qqy install software-properties-common gettext-base unzip \
	&& rm -rf /var/lib/apt/lists/* /var/cache/apt/*

#=======
# Java 8
#=======
RUN add-apt-repository ppa:webupd8team/java -y \
#	&& apt-get update -y \
	&& echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections \
	&& dpkg --configure -a \
	&& apt-get install openjdk-8-jdk-headless -y --force-yes \
	&& rm /etc/java-8-openjdk/accessibility.properties

####################################################################################################
# Adding Google Chrome and ChromeDriver like described in
# https://github.com/SeleniumHQ/docker-selenium/blob/master/NodeChrome/Dockerfile

#=======
# Chrome
#=======
#ARG CHROME_VERSION="google-chrome-stable"
ARG CHROME_VERSION=79.0.3945.117-1
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
	&& echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
	&& apt-get update -qqy \
	&& apt-get -qqy install google-chrome-stable=$CHROME_VERSION \
	&& rm /etc/apt/sources.list.d/google-chrome.list \
	&& rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
	&& sed -i 's/"$HERE\/chrome"/"$HERE\/chrome" --no-sandbox/g' /opt/google/chrome/google-chrome
	
#apt-get update
#apt-get install wget
#wget http://dl.google.com/linux/deb/pool/main/g/google-chrome-unstable/google-chrome-unstable_73.0.3679.0-1_amd64.deb
#apt-get install -f ./google-chrome-unstable_73.0.3679.0-1_amd64.deb

#=============
# ChromeDriver 
# Is not necessary, in execution time TestMaker gets automatically the indicated ChromeDriver version indicated in the code
# but you can download the same version used in the project is you want accelerate a few seconds the execution
#=============
#ARG CHROME_DRIVER_VERSION=78.0.3904.70
#RUN if [ -z "$CHROME_DRIVER_VERSION" ]; \
#  then CHROME_MAJOR_VERSION=$(google-chrome --version | sed -E "s/.* ([0-9]+)(\.[0-9]+){3}.*/\1/") \
#    && CHROME_DRIVER_VERSION=$(wget --no-verbose -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION}"); \
#  fi \
#  && echo "Using chromedriver version: "$CHROME_DRIVER_VERSION \
#  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip \
#  && rm -rf /opt/selenium/chromedriver \
#  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \
#  && rm /tmp/chromedriver_linux64.zip \
#  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION \
#  && chmod 755 /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION \
#  && ln -fs /opt/selenium/chromedriver-$CHROME_DRIVER_VERSION /usr/bin/chromedriver

####################################################################################################
# Adding Google Firefox and GeckoDriver like described in
# https://github.com/SeleniumHQ/docker-selenium/blob/master/NodeFirefox/Dockerfile

#=========
# Firefox
#=========
#ARG FIREFOX_VERSION=latest
ARG FIREFOX_VERSION=72.0.1
RUN FIREFOX_DOWNLOAD_URL=$(if [ $FIREFOX_VERSION = "latest" ] || [ $FIREFOX_VERSION = "nightly-latest" ] || [ $FIREFOX_VERSION = "devedition-latest" ]; then echo "https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION-ssl&os=linux64&lang=en-US"; else echo "https://download-installer.cdn.mozilla.net/pub/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2"; fi) \
  && apt-get update -qqy \
  && apt-get -qqy --no-install-recommends install firefox \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
  && wget --no-verbose -O /tmp/firefox.tar.bz2 $FIREFOX_DOWNLOAD_URL \
  && apt-get -y purge firefox \
  && rm -rf /opt/firefox \
  && tar -C /opt -xjf /tmp/firefox.tar.bz2 \
  && rm /tmp/firefox.tar.bz2 \
  && mv /opt/firefox /opt/firefox-$FIREFOX_VERSION \
  && ln -fs /opt/firefox-$FIREFOX_VERSION/firefox /usr/bin/firefox

#============
# GeckoDriver
# Is not necessary, in execution time TestMaker gets automatically the indicated ChromeDriver version indicated in the code
# but you can download the same version used in the project is you want accelerate a few seconds the execution
#============
#ARG GECKODRIVER_VERSION=latest
#ARG GECKODRIVER_VERSION=0.26.0
#RUN GK_VERSION=$(if [ ${GECKODRIVER_VERSION:-latest} = "latest" ]; then echo "0.26.0"; else echo $GECKODRIVER_VERSION; fi) \
#  && echo "Using GeckoDriver version: "$GK_VERSION \
#  && wget --no-verbose -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v$GK_VERSION/geckodriver-v$GK_VERSION-linux64.tar.gz \
#  && rm -rf /opt/geckodriver \
#  && tar -C /opt -zxf /tmp/geckodriver.tar.gz \
#  && rm /tmp/geckodriver.tar.gz \
#  && mv /opt/geckodriver /opt/geckodriver-$GK_VERSION \
#  && chmod 755 /opt/geckodriver-$GK_VERSION \
#  && ln -fs /opt/geckodriver-$GK_VERSION /usr/bin/geckodriver


# Xvfb
RUN apt-get update -qqy \
	&& apt-get -qqy install xvfb \
	&& rm -rf /var/lib/apt/lists/* /var/cache/apt/*

COPY target/test80-1.0.zip Test80.zip
RUN unzip Test80.zip
WORKDIR /test80-1.0
EXPOSE 80
CMD xvfb-run -s "-screen 0 1024x768x24" java -cp test80.jar com.mng.robotest.test80.access.rest.ServerRest
